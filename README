BEANSTALK 说明
---- Minimalistic PHP client for beanstalk.

Synopsis
--------
This library allows you to interface with the beanstalk[1] work queue and is
built with a minimal featureset still supporting the complete protocol. The
main (and currently only) class can be found at `src/Socket/Beanstalk.php`.

The class was formerly part of the queue plugin for CakePHP[2]. It has been
extracted for higher reusability in other places and frameworks.

[1] http://kr.github.com/beanstalkd
[2] https://github.com/davidpersson/queue
[3] https://github.com/jingwu15/phpbeanstalk

Copyright & License
-------------------
Beanstalk, a beanstalk PHP client library for the beanstalk work queue is
Copyright (c) 2009-2013 David Persson if not otherwise stated. The code
is distributed under the terms of the MIT License. For the full license
text see the LICENSE file.

Versions & Requirements
-----------------------
0.1.6, PHP >=5.4.0 (in progress)

Usage
-----
Add ``jingwu/phpbeanstalk`` as a dependency in your project's ``composer.json`` file (change version to suit your version of Elasticsearch):
```json
    {
        "require": {
            "jingwu/phpbeanstalk": "0.1.6"
        }
    }
```

<?php
require 'vendor/autoload.php';
use Jingwu\PhpBeanstalk\Client;

// A sample producer.
$client = new Client(); // For connection options see the class documentation.

$client->connect();
$client->choose('flux'); // Begin to use tube `'flux'`.
$client->put(
    23, // Give the job a priority of 23.
    0,  // Do not wait to put job into the ready queue.
    60, // Give the job 1 minute to run.
    '/path/to/cat-image.png' // The job's body.
);
$client->disconnect();

//
// A sample consumer.
//
$client = new Client();

$client->connect();
$client->watch('flux');

while(true) {
    $job = $client->reserve(); // Block until job is available.
    // Now $job is an array which contains its ID and body:
    // array('id' => 123, 'body' => '/path/to/cat-image.png')

    // Processing of the job...
    $result = touch($job['body']);

    if($result) {
        $client->delete($job['id']);
    } else {
        $client->bury($job['id']);
    }
}
// When exiting i.e. on critical error conditions
// you may also want to disconnect the consumer.
// $client->disconnect();

?>

Running the Tests
-----------------
The integration tests contained in this library require a running beanstalkd
instance. You'll need to start a dedicated instance on port 11301 as follows.

$ beanstalkd -VV -l 127.0.0.1 -p 11300

Tests for this library are PHPUnit based. To run the tests you'll need
to have PHPUnit installed[1]. Following commands will run all the tests.

$ cd /path/to/beanstalk/src
$ phpunit -c ../phpunit.xml

[1] http://www.phpunit.de/manual/current/en/installation.html
